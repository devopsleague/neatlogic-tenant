<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.framework.tenant.dao.mapper.TeamMapper">
	<select id="selectTeamList" parameterType="codedriver.framework.dto.TeamVo" resultType="codedriver.framework.dto.TeamVo">
		SELECT distinct
		t.uuid AS uuid,
		t.name,
		t.description ,
		t.time_id as timeId,
		t.parent_id as parentId,
		(SELECT COUNT(1) FROM team WHERE lft &gt; t.lft AND rht &lt; t.rht) AS childCount,
		tr.role_name as roleName,
		t.lft,
		t.rht
		FROM
		team t
		LEFT JOIN team_role tr ON tr.team_uuid = t.uuid
		WHERE
		1=1
		<if test="roleName != null and  roleName!='' ">
			 AND tr.role_name = #{roleName}
		</if>
		<if test='parentId != null'>
			AND t.parent_id = #{parentId}
		</if>
		ORDER BY lft ASC
	</select>
	
	<select id="searchTeamByName" parameterType="codedriver.framework.dto.TeamVo" resultType="codedriver.framework.dto.TeamVo">
		SELECT t.uuid, t.name,
		(SELECT t0.name FROM team t0 WHERE t0.uuid =t.parent_id) AS parentName
		FROM team t
		WHERE is_delete = 0
		<if test="name != null and name!=''">
			AND lower(t.name) LIKE CONCAT ('%', lower(#{name}), '%')
		</if>
		ORDER BY LENGTH(t.name),t.name ASC
		<if test="pageSize != null">
			limit #{pageSize}
		</if>
	</select>
	
	<select id="getTreePathByTeamUuid" parameterType="codedriver.framework.dto.TeamVo" resultType="codedriver.framework.dto.TeamVo">
		SELECT DISTINCT
		t.uuid,
		t.lft
		FROM
		team t,team t2
		WHERE
		1=1
		AND t2.uuid = #{uuid}
		AND t2.lft
		&gt;=t.lft
		AND t2.rht &lt;=t.rht
		ORDER BY t.lft ASC
	</select>
	
	<insert id="insertTeamRole" parameterType="codedriver.framework.dto.TeamVo">
		insert into team_role (team_uuid , role_name)
		values
		<foreach collection="list" item="item" index="index" separator=",">
			(#{item.uuid}, #{item.roleName})
		</foreach>
	</insert>	
	
	<select id="getTeamUserByUserIdTeamIds" resultType="codedriver.framework.dto.TeamUserVo">
		SELECT
		ut.user_id AS userId,
		ut.team_uuid AS teamUuid,
		ut.type AS type
		FROM user_team ut
		where ut.user_id = #{userId}
		AND ut.team_uuid IN
		<foreach collection="teamUuidList" item="item" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>	
	
	<select id="selectTeamById" parameterType="java.lang.String" resultType="codedriver.framework.dto.TeamVo">
		SELECT uuid, name, lft, rht, parent_id as parentId, is_handle_childtask AS isHandleChildtask FROM
		team WHERE uuid =
		#{value}
	</select>
	
	<select id="getTeamListByParentId" resultType="codedriver.framework.dto.TeamVo">
		SELECT a.uuid, (select count(1) from team WHERE parent_id = a.uuid) as childCount from team a WHERE
		<choose>
			<when test="parentId == null">
				a.uuid = 0
			</when>
			<otherwise>
				a.parent_id = #{parentId}
			</otherwise>
		</choose>
		ORDER by a.lft
	</select>
	
	<resultMap type="codedriver.framework.dto.TeamVo" id="teamInfoMap">
		<id column="uuid" property="uuid" />
		<result column="name" property="name" />
		<result column="parentId" property="parentId" />
		<result column="description" property="description" />
		<result column="isHandleChildtask" property="isHandleChildtask" />
	</resultMap>

	<select id="getTeamByUuid" parameterType="java.lang.String" resultMap="teamInfoMap">
		SELECT uuid, NAME, a.description,parent_id as parentId,is_handle_childtask as isHandleChildtask FROM team a 
		WHERE
		a.uuid = #{value}
	</select>	
	
	<select id="getTeamsByLeftRight" parameterType="codedriver.framework.dto.TeamVo" resultType="codedriver.framework.dto.TeamVo">
		SELECT uuid,
		name,
		description ,
		time_id as timeId,
		parent_id as
		parentId,
		lft,
		rht from team where
		lft &gt;= #{lft} and rht &lt;= #{rht}
	</select>
	
	<insert id="insertTeam" parameterType="codedriver.framework.dto.TeamVo">
		insert into team
		(uuid,name,description, lft, rht, parent_id,is_handle_childtask, import_id)
		values
		(#{uuid},#{name},#{description}, #{lft}, #{rht}, #{parentId} ,#{isHandleChildtask}, #{importId})
	</insert>
	
	<insert id="insertUserTeam" parameterType="codedriver.framework.dto.TeamUserVo">
		insert into
		user_team(user_id,team_uuid,type)
		values(#{userId},#{teamUuid},#{type})
	</insert>	
	
	<update id="updateTeamRightForInsert" parameterType="java.lang.Integer">
		update team set rht = rht + 2 where rht &gt;= #{value}
	</update>

	<update id="updateTeamLeftForInsert" parameterType="java.lang.Integer">
		update team set lft = lft + 2 where lft &gt;= #{value}
	</update>
	
	<update id="updateTeamLeftRightCode" parameterType="codedriver.framework.dto.TeamVo">
		update team
		set
		lft = #{lft},
		rht = #{rht}
		where
		uuid = #{uuid}
	</update>

	<update id="updateTeam" parameterType="codedriver.framework.dto.TeamVo">
		update team
		set
		name = #{name},
		description = #{description},
		is_handle_childtask = #{isHandleChildtask}
		where
		uuid = #{uuid}
	</update>
	
	<update id="updateTeamLeftForDelete" parameterType="codedriver.framework.dto.TeamVo">
		UPDATE team set lft = lft - (#{rht} - #{lft} + 1) where lft &gt; #{lft}
	</update>

	<update id="updateTeamRightForDelete" parameterType="codedriver.framework.dto.TeamVo">
		UPDATE
		team SET rht = rht - (#{rht} - #{lft} + 1) WHERE rht &gt; #{rht}
	</update>
	
	<update id="updateTeamParentId">
		UPDATE team set parent_id = #{parentId} WHERE uuid = #{uuid}
	</update>
	
	<update id="updateTeamLeftByLeft">
		UPDATE team set lft = lft + #{diff} WHERE lft &gt;= #{minLeft} and lft &lt;= #{maxLeft} and uuid not in
		<foreach collection="teamUuidList" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
	</update>

	<update id="updateTeamRightByRight">
		UPDATE team set rht = rht + #{diff} WHERE rht &gt;= #{minRight} and rht &lt;= #{maxRight} and uuid not in
		<foreach collection="teamUuidList" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
	</update>
	
	<update id="updateTeamLeftRight">
		UPDATE team set lft = lft + #{diff}, rht = rht + #{diff} WHERE uuid in
		<foreach collection="teamUuidList" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
	</update>
	
	<delete id="deleteTeam" parameterType="java.lang.String">
		delete from team where uuid = #{value}
	</delete>
	
	<delete id="deleteTeamRoleByRoleName" parameterType="java.lang.String">
		delete from team_role where role_name = #{roleName}
	</delete>
	
</mapper>